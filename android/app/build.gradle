apply plugin: "com.android.application"
//def pathenv = "./environment/bdc"
//project.ext.envConfigFiles = [
//        dev : pathenv + "/.env.dev",
//        beta: pathenv + "/.env.beta",
//        pro : pathenv + "/.env.pro",
//]
//apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile


project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"//add this

def enableSeparateBuildPerCPUArchitecture = false


def enableProguardInReleaseBuilds = false


def jscFlavor = 'org.webkit:android-jsc:+'


def enableHermes = project.ext.react.get("enableHermes", false);


def nativeArchitectures = project.getProperties().get("reactNativeDebugArchitectures")

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.stech.qsland"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 2
        versionName "3.0.0"
        missingDimensionStrategy 'react-native-camera', 'general' // <--- insert this line add react-native-camera
        //##e2
//        configurations.all {
//            resolutionStrategy { force 'androidx.core:core:1.9.0' }
//        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }   
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            if (nativeArchitectures) {
                ndk {
                    abiFilters nativeArchitectures.split(',')
                }
            }
            // applicationIdSuffix ".debug"
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    flavorDimensions "default"
    productFlavors {
        alpha {
            // versionCode 778899
            // versionName "v.1.1.BUILD_NUM"
            // applicationIdSuffix ".dev"
            //dimension = "version"
            // resValue "string", "app_name", "VisualogyxDEV"
            // buildConfigField "String", "HOST", System.getenv("VISUALOGYX_HOST_DEV") 
        }
        dev {
            //applicationIdSuffix ".dev"
        }
        beta {
        }
        pro {
            //applicationIdSuffix ".pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }
     applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def formattedDate = new Date().format('HHmmss_ddMMyyyy')
            outputFileName = "QSLAND-${formattedDate}.apk"
        }
    }
    /** ##error1*/
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libfbjni.so'
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"  // From node_modules
    /******install libary here***************************************/
    implementation project(':react-native-splash-screen')//spash
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation project(':react-native-svg')//anh icon
    implementation 'com.google.android.gms:play-services-ads:20.6.0'
    implementation platform('com.google.firebase:firebase-bom:29.0.0')//notify
    implementation 'com.google.firebase:firebase-analytics'//notify
    implementation project(':react-native-file-picker')//chon file android
    implementation project(':react-native-linear-gradient')// mau sac
    implementation project(':react-native-charts-wrapper')//bieu do
    //##e2
//    implementation "androidx.core:core-ktx:+"
    // implementation project(':react-native-fbsdk-next')//login with facebook
    // implementation 'com.facebook.android:facebook-android-sdk:[4,5)'//login with facebook
    // implementation 'com.facebook.android:facebook-android-sdk:latest.release'//login with facebook
    implementation project(':react-native-file-viewer')
    implementation project(':react-native-fs')
    implementation project(':react-native-share')//share mang xa hoi
    implementation project(':react-native-camera')//chup anh camera
    implementation 'com.facebook.fresco:animated-gif:2.6.0' //gif
    implementation project(':react-native-config')
    implementation project(':react-native-exception-handler')
    implementation project(':@react-native-camera-roll_camera-roll')
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation "androidx.core:core-splashscreen:1.0.0"
    implementation project(':react-native-html-to-pdf')
    /**************************************************************/
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.getRequested().getGroup() == 'com.google.android.gms') {
            // If different projects require different versions of
            // Google Play Services it causes a crash on run.
            // Fix by overriding version for all projects.
            details.useVersion('17.0.0')
        }
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'